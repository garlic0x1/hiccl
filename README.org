#+title: Readme

Hiccup HTML generator for Common Lisp

* Purpose
Spinneret is great but having to use macros to compose elements is less intuitive than simply having a function to render sexprs into html

* Usage

Hiccl exposes one function, `render-forms` and a macro `render` which is simply to use &body args for nicer editor support, they take an output argument (same as format) and any number of SXML expressions

- Symbols are raw (you can write literal HTML between `|` symbols)
- Strings are sanitized
- Lists are HTML nodes

Outputting to `nil` returns a string

#+begin_src lisp :exports both
(hiccl:render nil
 `(:div :hi "world"
    (:span "tag can be symbol")
    "no </\"xss\"> allowed"
    |symbols <are> "raw" </are>|
    (:a :href "hTtPs://link.org" "clickme")))
#+end_src

#+RESULTS:
#+begin_example
<div hi="world">
<span>
tag can be symbol
</span>
no &lt;/&quot;xss&quot;&gt; allowed
symbols <are> "raw" </are>
<a href="hTtPs://link.org">
clickme
</a>
</div>
#+end_example

** JSX style syntax
class and id tags can use the following shorthand notation:
#+begin_src lisp :exports both
(hiccl:render nil
  '(:div.c1#id1.c2 :class "c3" :id "id2"))
#+end_src

#+RESULTS:
: <div class="c3 c1 c2" id="id2 id1">
: </div>

Order is not guarunteed at the moment, but I will consider adding it

** Specifying output
Render to a stream by specifying the `:out` argument, renders to string by default
#+begin_src lisp
(hiccl:render *standard-output* sxml)
;; alternatively you can use `t` like in format
(hiccl:render t sxml)
#+end_src

** Composing components
#+begin_src lisp :exports both
(defun hello-component (name)
  `(:span ,(format nil "Hello ~a" name)))

(hiccl:render nil
 `(:div
   "hello-component:"
   ,(hello-component "garlic")))
#+end_src

#+RESULTS:
: <div>
: hello-component:
: <span>
: Hello garlic
: </span>
: </div>

** Validating tags
(disabled rn)
This works, but it will emit a warning if `*validate-tags?*` is true
#+begin_src lisp :exports both
(hiccl:render nil '(:bad-tag "hi"))
#+end_src

#+RESULTS:
: <bad-tag>
: hi
: </bad-tag>

#+begin_src
WARNING: Invalid tag BAD-TAG
#+end_src

* To do
- Handle boolean attrs properly
- Emit warning on unknown attributes/tags

  Not sure if I really want to do this, since it would have to happen at runtime
- Add pretty indenting
