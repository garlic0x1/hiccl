#+title: Readme

Hiccup HTML generator for Common Lisp

* Purpose
Spinneret is great but having to use macros to compose elements is less intuitive than simply having a function to render sexprs into html

* Usage
- Symbols are raw (you can write literal HTML between `|` symbols)
- Strings are sanitized
- Lists are HTML nodes
#+begin_src lisp :exports both
(hiccl:render nil
 `(:div :hi "world"
    (:span "tag can be symbol")
    "no </\"xss\"> allowed"
    |symbols <are> "raw" </are>|
    (:a :href "hTtPs://link.org" "clickme")))
#+end_src

#+RESULTS:
#+begin_example
<div hi="NIL">
<span>
tag can be symbol
</span>
no &lt;/&quot;xss&quot;&gt; allowed
symbols <are> "raw" </are>
<a href="NIL">
clickme
</a>
</div>
#+end_example

** Specifying output
Render to a stream by specifying the `:out` argument, renders to string by default
#+begin_src lisp
(hiccl:render sxml :out *standard-output*)
#+end_src

** Composing components
#+begin_src lisp :exports both
(defun hello-component (name)
  `(:span ,(format nil "Hello ~a" name)))

(hiccl:render
 `(:div
   "hello-component:"
   ,(hello-component "garlic")))
#+end_src

#+RESULTS:
: <div>
:   hello-component:
:   <span>
:     Hello garlic
:   </span>
: </div>

** Validating tags
This works, but it will emit a warning if `*validate-tags?*` is true
#+begin_src lisp :exports both
(hiccl:render '(:bad-tag "hi"))
#+end_src

#+RESULTS:
: <bad-tag>
:   hi
: </bad-tag>

#+begin_src
WARNING: Invalid tag BAD-TAG
#+end_src

* To do
- JSX style class and ID in tag
  #+begin_src lisp
(:div.class-name#id-name)
#+end_src
- Emit warning on unknown attributes
